from keras.models import Sequential
from keras.layers import Dense
import numpy as np

# x_train = np.array([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50]) 
# y_train = np.array([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50])
# x_test = np.array([101,102,103,104,105,106,107,108,109,110])
# y_test = np.array([101,102,103,104,105,106,107,108,109,110])

# model = Sequential()
# model.add(Dense(10, input_dim =1, activation='relu'))  
# model.add(Dense(15))
# model.add(Dense(20))
# model.add(Dense(18))
# model.add(Dense(12))
# model.add(Dense(8))
# model.add(Dense(6))
# model.add(Dense(1, activation='relu'))
"""
loss :  1.0477378964424134e-10
acc :  1.0
결과물 :
 [101.99999]
 [103.00001]
 [104.     ]
 [104.99999]
 [105.99999]
 [107.00001]
 [108.00002]
 [109.00001]
 [110.     ]]
"""

# x_train = np.array([5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110]) 
# y_train = np.array([5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110])
# x_test = np.array([101,102,103,104,105,106,107,108,109,110])
# y_test = np.array([101,102,103,104,105,106,107,108,109,110])

# model = Sequential()
# model.add(Dense(3, input_dim =1, activation='relu'))  
# model.add(Dense(5))
# model.add(Dense(1, activation='relu'))
"""
loss :  0.00017536571249365807
acc :  1.0
결과물 :
 [[101.01165 ]
 [102.011986]
 [103.01234 ]
 [104.01268 ]
 [105.01303 ]
 [106.01338 ]
 [107.013725]
 [108.01407 ]
 [109.01442 ]
 [110.014755]]
"""

# train data 수정해보기

# x_train = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) 
# y_train = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50])
# x_test = np.array([101,102,103,104,105,106,107,108,109,110])
# y_test = np.array([101,102,103,104,105,106,107,108,109,110])

# model = Sequential()
# model.add(Dense(2, input_dim =1, activation='relu'))  
# model.add(Dense(20))
# model.add(Dense(10))
# model.add(Dense(1, activation='relu'))

"""
loss :  1.2223608791828156e-10
acc :  1.0
결과물 :
 [[101.      ]
 [101.99999 ]
 [102.99999 ]
 [103.99999 ]
 [104.99999 ]
 [105.99999 ]
 [107.      ]
 [107.999985]
 [108.99999 ]
 [109.999985]]
"""

# x_train = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) 
# y_train = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50])
# x_test = np.array([101,102,103,104,105,106,107,108,109,110])
# y_test = np.array([101,102,103,104,105,106,107,108,109,110])

# model = Sequential()
# model.add(Dense(5, input_dim =1, activation='relu'))  
# model.add(Dense(10))
# model.add(Dense(20))
# model.add(Dense(8))
# model.add(Dense(1, activation='relu'))

"""
epochs = 200으로 올림
loss :  3.0551390955224635e-05
acc :  1.0
결과물 :
 [[101.00533 ]
 [102.00537 ]
 [103.00542 ]
 [104.005455]
 [105.005516]
 [106.00555 ]
 [107.00559 ]
 [108.005646]
 [109.005684]
 [110.005714]]

epochs = 300
loss :  7.593189366161823e-08
acc :  1.0
결과물 :
 [[101.00027 ]
 [102.00028 ]
 [103.00026 ]
 [104.000275]
 [105.000275]
 [106.000275]
 [107.00028 ]
 [108.000275]
 [109.00028 ]
 [110.00029 ]]

epochs = 400 / 1차 : acc : 0.0
loss :  2.0986556774005293e-05
acc :  1.0
결과물 :
 [[100.99566 ]
 [101.99562 ]
 [102.99557 ]
 [103.99551 ]
 [104.995445]
 [105.9954  ]
 [106.99534 ]
 [107.995285]
 [108.99524 ]
 [109.99517 ]]

epochs = 800 / 5~6차 acc : 0.0
loss :  1.3387762010097503e-10
acc :  1.0
결과물 :
 [[100.99999 ]
 [101.99999 ]
 [102.999985]
 [103.999985]
 [104.999985]
 [105.99998 ]
 [107.      ]
 [108.      ]
 [108.99999 ]
 [109.99999 ]]

epochs = 1000
loss :  5.704350769519806e-10
acc :  1.0
결과물 :
 [[100.99998 ]
 [101.99998 ]
 [102.99998 ]
 [103.99998 ]
 [104.999985]
 [105.99998 ]
 [106.99998 ]
 [107.99998 ]
 [108.99998 ]
 [109.99997 ]]
 
"""

# x_train = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) 
# y_train = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50])
# x_test = np.array([101,102,103,104,105,106,107,108,109,110])
# y_test = np.array([101,102,103,104,105,106,107,108,109,110])

# model = Sequential()
# model.add(Dense(5, input_dim =1, activation='relu'))  
# model.add(Dense(10))
# model.add(Dense(20))
# model.add(Dense(15))
# model.add(Dense(11))
# model.add(Dense(8))
# model.add(Dense(4))
# model.add(Dense(1, activation='relu'))

"""
1차 시도 acc : 0.0
2차 시도
loss :  6.402842700481415e-11
acc :  1.0
결과물 :
 [[101.      ]
 [101.999985]
 [103.00002 ]
 [104.      ]
 [105.      ]
 [105.99999 ]
 [106.99999 ]
 [108.00001 ]
 [109.      ]
 [110.00001 ]]

3차 epochs = 1500 올림, acc : 0.0
4차 acc : 0.0
5차 acc : 0.0
6차 acc : 0.0
7차 
loss :  4.3655745685100555e-10
acc :  1.0
결과물 :
 [[101.00002 ]
 [102.000015]
 [103.000015]
 [104.000015]
 [105.      ]
 [106.00002 ]
 [107.00001 ]
 [108.000015]
 [109.00001 ]
 [110.00001 ]]

"""

# 1부터 100까지 일일이 다 입력? 아마 간단하게 출력할 수 있는 방법이 있을 것.

# 데이터 준비
x_train = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
                    41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
                    81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) 
y_train = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
                    41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
                    81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) 
x_test = np.array([101,102,103,104,105,106,107,108,109,110])
y_test = np.array([101,102,103,104,105,106,107,108,109,110])

model = Sequential()
model.add(Dense(5, input_dim =1, activation='relu'))   # 한 덩어리만 들어감(Vector, 1차원), dim = dimension(차원)
model.add(Dense(15))
model.add(Dense(25))
model.add(Dense(35))
model.add(Dense(45))
model.add(Dense(55))
model.add(Dense(50))
model.add(Dense(40))
model.add(Dense(30))
model.add(Dense(20))
model.add(Dense(10))
model.add(Dense(5))
model.add(Dense(1, activation='relu'))

model.summary() # 모델이 어떻게 구성되어 있는지 요약, 정리
                # 데이터 설정(?)에 문제가 있어도 summary 까지는 문제 없이 출력될 수 있음
                # 오류 발생시에는 부분부분 주석 처리를 하면서 어디가 잘못된 건지 파악할 수 있다

# 컴파일
model.compile(loss='mse', optimizer='adam', metrics=['accuracy'])

# 훈련
model.fit(x_train, y_train, epochs=100, batch_size=1, 
         validation_data = (x_train, y_train), verbose = 3)   
                                            # 3은 epoch 횟수만 출력 / 2 는 3개 / 1은 4개 / 0은 아예 안 보임(epoch 훈련 과정도 안 보임)
                                            # 상세한 정도 1 > 2 > 3 > 0  

# 평가
loss, acc = model.evaluate(x_test, y_test, batch_size =1)

print("loss : ", loss)
print("acc : ", acc)

# 예측
output = model.predict(x_test)
print("결과물 : \n", output)



"""
epochs = 100
loss :  1.3969838619232177e-10
acc :  1.0
결과물 :
 [[100.99999 ]
 [102.      ]
 [103.00001 ]
 [103.99999 ]
 [104.999985]
 [106.00001 ]
 [107.00004 ]
 [108.00001 ]
 [109.00001 ]
 [110.00001 ]]

정제된 data가 많이 주어지니까 epochs 횟수를 10으로 줄여도 결과물이 꽤 근사치로 나옴
epochs = 10
loss :  0.002649484807625413
acc :  1.0
결과물 :
 [[100.95277 ]
 [101.951836]
 [102.95091 ]
 [103.949974]
 [104.94905 ]
 [105.948135]
 [106.947205]
 [107.94628 ]
 [108.94536 ]
 [109.94444 ]]
"""

"""

layer, node 변동 x
epochs 5000, batch_size 50

loss :  1.7462298274040222e-10
acc :  1.0
결과물 :
 [[101.      ]
 [102.      ]
 [102.99999 ]
 [104.      ]
 [105.      ]
 [106.000015]
 [107.000015]
 [107.999985]
 [109.      ]
 [110.00001 ]]

layer, node 변동 x
epochs 2000, batch_size 20
loss :  1.5716068724191956e-10
acc :  1.0
결과물 :
 [[100.99999 ]
 [102.      ]
 [103.      ]
 [104.000015]
 [104.999985]
 [106.000015]
 [107.000015]
 [108.00001 ]
 [109.      ]
 [109.99998 ]]



model = Sequential()
model.add(Dense(5, input_dim =1, activation='relu'))  
model.add(Dense(15))
model.add(Dense(25))
model.add(Dense(35))
model.add(Dense(45))
model.add(Dense(55))
model.add(Dense(50))
model.add(Dense(40))
model.add(Dense(30))
model.add(Dense(20))
model.add(Dense(10))
model.add(Dense(5))
model.add(Dense(1, activation='relu'))
epochs=10000, batch_size=100,

loss :  1.2223608236716643e-10
acc :  1.0
결과물 :
 [[100.99999 ]
 [102.00001 ]
 [103.00001 ]
 [104.      ]
 [105.00001 ]
 [106.000015]
 [107.00001 ]
 [108.000015]
 [109.000015]
 [110.000015]]
"""