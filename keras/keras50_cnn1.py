# cnn, 이미지를 자른다, 복잡하다,,,

# (2, 2)의 의미? 이미지를 2, 2로 자르겠다?? / padding 이란 파라미터 사용
# (10, 10, 1) 가로, 세로 : 10, 10 / 1 아니면 3 , 1: 흑백, 3 : 칼라 (명암 또는 특성)
# 사진 10,000장 -> (10000, 10, 10, 1) 행은 10000, 역시 무시
# 그래서 input shape(10, 10, 1)이 됨
# paddiing 은 default 가 있다 
# 이미지를 잘라서 레이어에 넘겨준다 
# cnn은 4차원 모델, 3차원 형태로 모델에서 명시
#######layer에 입력한 각 용어들
                                                                                                                                                                                                                                                                                                                                                                          # input_shpae = 10, 10, 1 : 높이 픽셀, 폭 픽셀, 흑백
# 퀴즈
# model.add(Conv2D(10, (3, 3), input_shape = (10, 10, 1)))
# model.add(Conv2D(7, (4, 4)))

# 먼저 10x10의 이미지를 3x3으로 자르면 8x8이 나옴 -> output shape = (None, 8, 8, 10) 첫 번째 레이어의 아웃풋
# 다음 레이어로 넘어가자
# 첫 번째 레이어의 실행으로 나온 8x8의 이미지를 4x4로 자르면 5x5개가 나온다 -> output shape = (None, 5, 5, 7)

# 현재 모델 아무런 문제가 없을까?
# 가생이 애들은 연산이 덜 이뤄진다, 상대적인 데이터 손실이 발생한다
# 겹치는 부분의 애들은 연산이 중복으로 많이 이뤄지니까
# 어떻게 해결할까?
# 겨울에 열 손실 막으려면 뭐할까
# 패딩 입지
# padding 이라는 파라미터 사용
# 사이드 부분의 이미지 데이터들의 손실을 어느 정도 막을 수 있다
# padding 입력하지 않아도 실행이 됨, 이 말은 곧 디폴트값이 있다는 것!
# 디폴트는 valid
# valid : same-size padding을 하지 않기 때문에 출력 이미지의 크기가 입력 이미지 크기보다 작아진다
# valid : 패딩을 하지 않음(사이즈가 맞지 않을 경우 가장 우측의 열 혹은 가장 아래의 행을 드랍한다

# 쪼갤 때 왜 한 칸씩 움직일까? 두칸 뛰고 갈 순 없을까?
# 관련 파라미터가 있을 것, 찾아봐라
# strides, 인수는 (정수, 정수) 커널이 움직이는 방식을 결정하는 것
# 우리가 입력하지 않아도 됐던 건 이 역시 디폴트 값이 있기 때문
# strides의 디폴트는 (1, 1)로 이 상태에서는 커널이 좌우로 1픽셀 상하로 1픽셀씩 움직인다
# 만약 (2, 2)로 지정하면 커널이 좌우로 2픽셀, 상하로 2픽셀 움직이므로 출력되는 이미지의 크기가
# 반으로 줄어든다, 최댓값 풀링 대신 이를 사용하는 경우도 있다 (풀링에 대해서 알아볼 것)
# 이미지 용량 작아지고 속도는 빨라지지만 성능 떨어짐은 고려해야함

# Maxpoolinig
# 

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten  # 각레이어마다 이미지를 자르기 때문에 역시 레이어 불러와야함

model = Sequential()
model.add(Conv2D(10, (2, 2), input_shape = (10, 10, 1)))     # (9, 9, 10)
model.add(Conv2D(7, (3, 3)))                                 # (7, 7, 7)
model.add(Conv2D(5, (2, 2), padding = 'same'))               # (7, 7, 5) # padding=same 적용해서
model.add(Conv2D(5, (2, 2)))                                 # (6, 6, 5)
# model.add(Conv2D(5, (2, 2), strides =2))                   # (3, 3, 5)
# model.add(Conv2D(5, (2, 2), strides = 2, padding = 'same') # ( 3, 3, 5)
model.add(MaxPooling2D(pool_size = 2))                       # pool_size = 2 2x2로 잘라서 부분마다 특성 높은 놈 골라서 뽑아준다
model.add(Flatten()) # 데이터를 쫙~ 펴 준다 / 3x3이 5장 겹쳐 있는 것을 하나씩 펼쳐진 느낌으로다가
model.add(Dense(1))

model.summary()

# stride를 padding보다 우선해서 적어준다
# flatten 하니까 summary의 outputshape가 n, 3, 3, 1 -> n, 45로 바뀌었다

'''
flatten 적용 전
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
conv2d_1 (Conv2D)            (None, 9, 9, 10)          50
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 7, 7, 7)           637
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 7, 7, 5)           145
_________________________________________________________________
conv2d_4 (Conv2D)            (None, 6, 6, 5)           105
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 3, 3, 5)           0
_________________________________________________________________
dense_1 (Dense)              (None, 3, 3, 1)           6
=================================================================
Total params: 943
Trainable params: 943
Non-trainable params: 0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
flatten 적용하니까 Dense에 들어갈 수 있는 형태로 바뀌었다! 
Layer (type)                 Output Shape              Param #
=================================================================
conv2d_1 (Conv2D)            (None, 9, 9, 10)          50
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 7, 7, 7)           637
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 7, 7, 5)           145
_________________________________________________________________
conv2d_4 (Conv2D)            (None, 6, 6, 5)           105
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 3, 3, 5)           0
_________________________________________________________________
flatten_1 (Flatten)          (None, 45)                0
_________________________________________________________________
dense_1 (Dense)              (None, 1)                 46
===============================================================
'''

