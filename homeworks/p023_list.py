# 2.9 리스트
# 파이썬의 가장 기본적인 데이터 구조를 꼽으면 바로 리스트, list
# 리스트 : 순서가 있는 자료의 집합(collection)이라 볼 수 있다
# 다른 언어에서는 보통 배열, array 이라고 하는 것과 유사하지만 
# 리스트의 기능이 조금 더 풍부하다

integer_list = [1, 2, 3]
heterogeneous_list = ["string", 0.1, True]
list_of_lists = [integer_list, heterogeneous_list, []] # 리스트 안의 리스트

print(list_of_lists) # [[1, 2, 3], ['string', 0.1, True], []]

list_length = len(integer_list) # 리스트의 길이를 알아볼 수 있다, 길이는 곧 리스트 값들의 갯수?
list_sum = sum(integer_list)    # 리스트 안에 있는 값들의 합을 계산할 수 있다

print(list_length) # 3
print(list_sum)    # 6

# 대괄호를 사용해 리스트의 n번째 값을 불러오거나 설정할 수 있다
x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

zero = x[0] # 결과는 0, 리스트의 순서는 0부터 시작한다
one = x[1]  # 1
nine = x[-1]  # 9, 리스트의 마지막 항목을 가장 파이썬스럽게 불러오는 방법
eight = x[-2] # 8, 뒤에서 두 번째
x[0] = -1 # x는 이제 [-1, 1, 2, 3, ..., 9] 

# 또한 대괄호를 사용해서 리스트 슬라이싱(slicing)을 할 수 있다
# [i:j]는 리스트를 i번째 값부터k j번째 직전의 값까지 분리하라는 의미
# 만약 i를 따로 명시해주지 않으면 리스트의 첫 번째 값부터 나눈다는 것을 의미
# 반면, j를 명시해주지 않으면 리스트의 마지막 값까지 나눈다는 것을 의미

first_three = x[:3]    # [-1, 1, 2]
three_to_end = x[3:]   # [3, 4, ..., 9]
one_to_four = x[1:5]   # [1, 2, 3, 4]
last_three = x[-3:]    # [7, 8, 9]
without_first_and_last = x[1:-1] # [1, 2, ..., 8]
copy_of_x = x[:] # [-1, 1, ..., 9]

# 파이썬에서는 동일한 방식으로 리스트뿐 아니라 문자열 같은 순차형(sequential) 변수를 나눌 수 있다
# 또한 간격(stride)을 설정하여 리스트를 분리할 수도 있다
# 참고로 간격은 음수로도 설정할 수 있다

every_third = x[::3]
print(every_third) # [-1, 3, 6, 9]

five_to_three = x[5:2:-1] # 5번째부터 2번째 자리 사이에서 1의 간격(역순)
print(five_to_three) # [5, 4, 3]
testslicing = x[5:1:-2] # 5번째부터 1번째 자리 사이에서 2의 간격(역순)
print(testslicing) # [5, 3] 

# 파이썬에서 제공하는 in 연산자를 사용하면 리스트 안에서 항목의 존재 여부 확인 가능

1 in [1, 2, 3]
0 in [1, 2, 3]

print(1 in [1, 2, 3])  # True
print(0 in [1, 2, 3])  # False

# 위의 방법은 리스트의 항목을 하나씩 모두 확인해 보기 때문에 리스트의 크기가 작을 때만
# 혹은 확인하는 데 걸리는 시간이 상관없다면 사용하도록!

# 리스트를 연결시키는 방법은 간단
# 만약 주어진 리스트에 바로 다른 리스트를 추가하고 싶다면 extend 사용

x = [1, 2, 3]
x.extend([4, 5, 6])
print(x) # [1, 2, 3, 4, 5, 6]

# 만약 x를 수정하고 싶지 않다면 리스트를 더해줄 수도 있다
x = [1, 2, 3]
y = x + [4, 5, 6] 

print(y) # [1,2 ,3 , 4, 5, 6]

# 주로 리스트에 항목을 하나씩 추가하는 경우가 많다
x = [1, 2, 3]
x.append(0)
print(x) # [1,2 , 3, 0]
y = x[-1]
print(y) # 0
z = len(x)
print(z) # 4

# 만약 리스트 안에 몇 개의 항목이 존재하는지 알고 있다면 손쉽게 리스트를 풀 수도 있다
x, y = [1, 2]
print(x) # 1
print(y) # 2

# 하지만 양쪽 항목의 갯수가 다르면 ValueError가 발생
# 보통 버릴 항목은 밑줄로 표시한다

_, y = [1, 2] # 이제 y == 2, 첫 번째 항목은 신경쓰지 않음





