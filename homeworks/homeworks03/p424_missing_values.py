# 14.3 결측치

# 14.3.1 리스트와이즈 삭제와 페어와이즈 삭제
# 여기서는 결측치 missing value 처리를 배운다
# 이를 위해 무작위로 테이블을 작성한 뒤에 
# 테이블에서 일부 데이터를 누락시키겠다
# 출력 결과와 같은 DataFrame이 생성된다

import numpy as np
from numpy import nan as NA
import pandas as pd

sample_data_frame = pd.DataFrame(np.random.rand(10, 4))

# 일부 데이터 누락
sample_data_frame.iloc[1, 0] = NA
sample_data_frame.iloc[2, 2] = NA
sample_data_frame.iloc[5:, 3] = NA

print(sample_data_frame)
print()
'''
          0         1         2         3
0  0.772926  0.866921  0.137921  0.978772
1       NaN  0.855316  0.511606  0.779541
2  0.375991  0.374223       NaN  0.586093
3  0.658339  0.624035  0.308173  0.930133
4  0.901337  0.469317  0.761529  0.089117
5  0.965780  0.309670  0.714349       NaN
6  0.030583  0.456866  0.412846       NaN
7  0.769618  0.543371  0.635452       NaN
8  0.914058  0.252214  0.938631       NaN
9  0.518532  0.930813  0.100827       NaN
'''

# 데이터가 누락된 행(NAN)을 가진 행을 통째로 지우는 것을
# 리스트와이즈 삭제(listwise deletion)라고 한다

# [리스트 14-12]처럼 dropna() 메서드를 사용하면 NAN이 있는 모든 행이 삭제된다
print(sample_data_frame.dropna())
'''
          0         1         2         3
0  0.230797  0.848400  0.196170  0.462448
3  0.989536  0.894422  0.607503  0.446850
4  0.566909  0.552931  0.389368  0.104784
'''

# 또한 사용 가능한 데이터만을 활용하는 방법도 있다
# 결손이 적은 열(예 : 0열, 1열)만 남기는 것을 
# 페어와이즈 삭제(pairwise deletion)라고 한다

print(sample_data_frame[[0, 1, 2]].dropna())
print()
'''
          0         1         2
0  0.415213  0.621942  0.917830
3  0.581931  0.154257  0.693836
4  0.044843  0.297256  0.822028
5  0.109443  0.283204  0.913286
6  0.265173  0.686244  0.219051
7  0.420755  0.225129  0.835442
8  0.946222  0.931044  0.842690
9  0.857623  0.362571  0.330145
'''

# 문제
# DataFrame의 0열과 2열은 남기되 NAN을 포함하는 행은 삭제하고 출력
np.random.seed(0)

sample_data_frame = pd.DataFrame(np.random.rand(10, 4))

sample_data_frame.iloc[1, 0] = NA
sample_data_frame.iloc[2, 2] = NA
sample_data_frame.iloc[5:, 3] = NA

print(sample_data_frame[[0, 2]].dropna())
print()
'''
          0         2
0  0.548814  0.602763
3  0.568045  0.071036
4  0.020218  0.778157
5  0.978618  0.461479
6  0.118274  0.143353
7  0.521848  0.264556
8  0.456150  0.018790
9  0.612096  0.943748
'''

# 14.3.2 결측치 보완
# 지금까지는 결측치가 있는 열이나 행을 삭제했지만,
# 여기서는 NAN 부분에 대체할 데이터를 대입

sample_data_frame = pd.DataFrame(np.random.rand(10, 4))

sample_data_frame.iloc[1, 0] = NA
sample_data_frame.iloc[2, 2] = NA
sample_data_frame.iloc[5:, 3] = NA

# fillna() 메서드를 이용하면 NAN 부분에 인자로 넘긴 수를 할당
# 아래는 0으로 채워진다
print(sample_data_frame.fillna(0))
print()
'''
          0         1         2         3
0  0.359508  0.437032  0.697631  0.060225
1  0.000000  0.670638  0.210383  0.128926
2  0.315428  0.363711  0.000000  0.438602
3  0.988374  0.102045  0.208877  0.161310
4  0.653108  0.253292  0.466311  0.244426
5  0.158970  0.110375  0.656330  0.000000
6  0.196582  0.368725  0.820993  0.000000
7  0.837945  0.096098  0.976459  0.000000
8  0.976761  0.604846  0.739264  0.000000
9  0.282807  0.120197  0.296140  0.000000
'''

# method를 ffill로 지정하면 NAN 부분을 앞에 있는 데이터로 채울 수 있다
print(sample_data_frame.fillna(method = 'ffill'))
print()
'''
          0         1         2         3
0  0.359508  0.437032  0.697631  0.060225
1  0.359508  0.670638  0.210383  0.128926
2  0.315428  0.363711  0.210383  0.438602
3  0.988374  0.102045  0.208877  0.161310
4  0.653108  0.253292  0.466311  0.244426
5  0.158970  0.110375  0.656330  0.244426
6  0.196582  0.368725  0.820993  0.244426
7  0.837945  0.096098  0.976459  0.244426
8  0.976761  0.604846  0.739264  0.244426
9  0.282807  0.120197  0.296140  0.244426
'''

# 문제
# DataFrame 의 NAN 부분을 앞에 있는 데이터로 출력
np.random.seed(0)

sample_data_frame = pd.DataFrame(np.random.rand(10, 4))

sample_data_frame.iloc[1, 0] = NA
sample_data_frame.iloc[6:, 2] = NA

print(sample_data_frame.fillna(method = "ffill"))
print()
'''
          0         1         2         3
0  0.548814  0.715189  0.602763  0.544883
1  0.548814  0.645894  0.437587  0.891773
2  0.963663  0.383442  0.791725  0.528895
3  0.568045  0.925597  0.071036  0.087129
4  0.020218  0.832620  0.778157  0.870012
5  0.978618  0.799159  0.461479  0.780529
6  0.118274  0.639921  0.461479  0.944669
7  0.521848  0.414662  0.461479  0.774234
8  0.456150  0.568434  0.461479  0.617635
9  0.612096  0.616934  0.461479  0.681820
'''

# 14.3.3 결측치 보완(평균 대입법)
# 결측치를 열 또는 행의 평균값으로 보충하는 법을 평균값 대입법이라고 한다


sample_data_frame = pd.DataFrame(np.random.rand(10, 4))

sample_data_frame.iloc[1, 0] = NA
sample_data_frame.iloc[2, 2] = NA
sample_data_frame.iloc[5:, 3] = NA


print(sample_data_frame.fillna(sample_data_frame.mean()))
print()
'''
          0         1         2         3
0  0.359508  0.437032  0.697631  0.060225
1  0.529943  0.670638  0.210383  0.128926
2  0.315428  0.363711  0.563599  0.438602
3  0.988374  0.102045  0.208877  0.161310
4  0.653108  0.253292  0.466311  0.244426
5  0.158970  0.110375  0.656330  0.206698
6  0.196582  0.368725  0.820993  0.206698
7  0.837945  0.096098  0.976459  0.206698
8  0.976761  0.604846  0.739264  0.206698
9  0.282807  0.120197  0.296140  0.206698
PS D:\Study>
'''

# 문제
# dataFrame의 NAN 부분을 열의 평균값으로 채워서 출력
import pandas as pd
np.random.seed(0)

sample_data_frame = pd.DataFrame(np.random.rand(10, 4))

sample_data_frame.iloc[1, 0] = NA
sample_data_frame.iloc[6:, 2] = NA

print(sample_data_frame.fillna(sample_data_frame.mean()))
print()
'''
          0         1         2         3
0  0.548814  0.715189  0.602763  0.544883
1  0.531970  0.645894  0.437587  0.891773
2  0.963663  0.383442  0.791725  0.528895
3  0.568045  0.925597  0.071036  0.087129
4  0.020218  0.832620  0.778157  0.870012
5  0.978618  0.799159  0.461479  0.780529
6  0.118274  0.639921  0.523791  0.944669
7  0.521848  0.414662  0.523791  0.774234
8  0.456150  0.568434  0.523791  0.617635
9  0.612096  0.616934  0.523791  0.681820
'''

