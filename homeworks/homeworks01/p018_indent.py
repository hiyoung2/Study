# 2.4 들여쓰기
# 많은 프로그래밍 언어가 코드의 단락을 구분하는데 중괄호{}를 사용한다
# 하지만 파이썬은 들여쓰기를 사용한다!

# '#'은 주석 의미
# 파이썬에서 주석은 실행되지 않지만, 코드를 이해하는데 도움이 된다

for i in [1, 2, 3, 4, 5]: 
    print(i)                 # 'for i' 단락의 첫 번째 줄
    for j in [1, 2, 3, 4, 5]:
        print(j)             # 'for j' 단락의 첫 번째 줄
        print(i + j)         # 'for j' 단락의 마지막 줄
    print(i)                 # 'for i' 단락의 마지막 줄
print("done looping")

# 이 덕분에 파이썬의 가독성은 아주 높아졌으나 들여쓰기를 잘못하면 오류가 발생하니 주의
# 들여쓰기에서 탭(tab)을 쓸지 아니면 스페이스 키를 사용할지 개발자들 사이에서 논쟁이 끊이질 않음
# 다른 많은 프로그래밍 언어에서는 별로 중요하지 않은 문제지만
# 파이썬에서는 탭과 스페이스를 다르게 인식한ㄴ다
# 들여쓰기에 둘을 섞어 사용한다면 파이썬 코드는 정상적으로 실행되지 않음
# 파이썬 코드를 작성 할 때는 항상 스페이스 키로만 들여쓰기를 하자

# 공백문자는 소괄호()와 대괄호[] 안에서는 무시되기 때문에 다음과 같은 긴 계산을 하거나

long_winded_computation = ( 1 +  2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 )

# 코드의 가독성을 높이는 데 유용하게 쓸 수 있음

list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

easier_to_read_list_of_lists = [[1, 2, 3],
                                [4, 5, 6],
                                [7, 8, 9]]

# 자주 사용하지는 않지만 역슬래시(backslash)를 사용하면 코드가 다음 줄로 이어지는 것을 명시 할 수 있음
two_plus_three = 2+ + \
                 3

# 들여쓰기를 사용함으로써 생기는 한 가지 문제는 코드를 복사해서 파이썬 셸에 
# 붙여넣을 때 어려움을 겪을 수 있다는 것
# 예를 들어 다음과 같은 코드를 파이썬 셸에 붙여넣기 하면

for i in [1, 2, 3, 4, 5]:


    print(i)             # 빈 줄이 있다는 것을 확인하자

# 인터프리터가 빈 줄을 보고 for문이 끝난 것으로 판단해서 다음과 같으 에러가 출력될 것
# IndentationError: expected an indented block
# ? 실행했는데 에러 없이 잘 나옴;;

# 한편 IPython에는 %paste라는 특별한 명령어가 있어서 공백문자뿐만 아니라 클립보드에 있는
# 무엇이든 붙여넣을 수 있음


