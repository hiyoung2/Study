# 6.3 클래스
# 6.3.1 객체
# 파이썬은 객체 지향 언어이기 때문에 지금까지 취급한 문자열이나 배열 등은 모두 객체(object)이다
# 객체는 실세계에 존재하거나 생각할 수 있는 '물건' 또는 '물체'를 의미한다
# 프로그래밍 세계에서는 객체는 변수(멤버)와 함수(메서드)가 뭉쳐서 정리된 '물건'을 말한다

# 예를 들어 list형 객체는 배열로 사용되지만, 잘 보면 상황에 따라 행동을 바꾸고 있다

mylist = [1, 10, 2, 20]

mylist.sort()

print(mylist) # [1, 2, 10, 20]

# 이는 mylist가 내부에 변수와 함수를 가지고 있으며 상황에 따라 행동 방식을 바꾸기 때문에 실현할 수 있다
# 객체를 사용하면 프로그래머는 함수나 변수를 의식하고 관리할 필요가 없다
# 객체에 대해 '이 숫자를 기억하라', '방금 전의 숫자를 정렬하라'고 주문하면 되므로 함수 및 변수 관리 부담이 가벼워진다

# 이미 존재하는 객체를 이용하기만 한다면 특별히 알아둘 필요는 없지만
# 스스로 새로운 객체를 만들거나 기존 객체를 수정할 경우에는 
# 객체 지향의 개념과 용어를 알아두면 좋다
# 생소한 단어가 많지만 이러한 단어는 Java나 Ruby 같은 다른 객체 지향 언어에서도 공통으로 사용되므로 널리 응용할 수 있다
# 클래스(정의) : 자동차 설계도
# 생성자(함수) : 자동차 공장
# 멤버(변수) : 휘발유의 양, 현재 속도 등
# 메서드(함수) : 브레이크, 엑셀, 핸들 등
# 인스턴스(실체) : 공장에서 만들어진 실제 자동차

# 클래스를 설계할 때는 다음 세 가지를 정의한다
# 1) 생성자(constructor) 
# - 클래스를 만들 때 자동으로 호출되는 특수 함수
# - 파이썬의 이름을 __init__으로 할 필요가 있다
# - 첫 번째 인수로 객체 자신을 의미하는 self라는 특수한 변수를 갖게 된다

# 2) 메서드(method)
# - 클래스가 갖는 처리, 즉 함수이다
# - 인스턴스를 조작하는 인스턴스 메서드, 클래스 전체를 처리하는 클래스 메서드, 
# - 인스턴스 없이도 실행할 수 있는 정적 메서드의 세 종류가 존재한다

# 3) 멤버(member)
# - 클래스가 가지는 값, 변수이다
# - 다른 객체 지향 언어에는 프라잇(private, 클래스 외부에서 접근 불가)과
# - 퍼블릭(public, 클래스 외부에서 접근 가능) 두 종류의 멤버가 마련되어 있지만,
# - 파이썬에는 모두 퍼블릭 멤버로 처리된다
# - 대신 파이썬에는 멤버에 대한 접근(access)을 프로퍼티(property)로 제한할 수 있다

# 기본적으로 생성자를 호출하여 인스턴스를 생성한 뒤 클래스를 사용할 수 있다
# 객체와 클래스는 '함수 import' 에서 소개한 package, module과 비슷하다
# 엄격한 규칙이 있는 것은 아니지만
# 하나만 사용할 때는 module이, 복수 개를 사용할 때는 class가 좋다고 한다
# 예를 들어 time 모듈은 시간을 계산할 뿐이므로 프로그램에 하나만 있어도 충분하지만
# 차량과 같은 경우에는 자가용과 회사 업무용으로 각각 다른 실체(즉, 인스턴스)를 
# 만들고 싶은 경우를 대비해서 클래스로 구현하는 것이 좋다

