# 5.2. 딕셔너리
# 5.2.1 딕셔너리형
# 딕셔너리형은 리스트형처럼 여러 데이터를 다룰 때 사용한다
# 리스트형과 다른 점은 인덱스 번호로 요소를 꺼내는 방식이 아니라!
# 키, key와 값, value가 쌍으로 연결 되어 있어 키를 통해 연결되어 있는 값을 얻는다
# {} 중괄호를 쓴다 / 리스트는 [] 대괄호
# 다른 프로그래밍 언어를 접한 적이 있다면 JSON(JavaScriptObjectNotation)과 비슷한 자료형이라고 기억해둬라
# (저는 접한 적이 없어요,,나중엔 다 접수해 볼게요)

# 작성법은 {키1: 값1, 키2: 값2, ...}입니다
# 문자열의 경우에는 따옴표(")로 감싸준다

dic = {"Norway" : "Oslo", "Korea" : "Seoul"}
print(dic) # {'Norway': 'Oslo', 'Korea': 'Seoul'}

# 문제 
# - 변수 town에 다음 키와 값을 가진 딕셔너리를 만들어 저장하라
# - 키1 : 경기도, 값1 : 수원, 키2 : 서울, 값2 : 중구

town = {"경기도" : "수원", "서울" : "중구"}
print(town) # {'경기도': '수원', '서울': '중구'}
print(type(town)) # <class 'dict'>

# 5.2.2 딕셔너리 요소 추출
# 딕셔너리 요소를 추출할 때는 '딕셔너리명["키"]'라고 기술한다

dic = {"Norway" : "Oslo", "Korea" : "Seoul"}
print(dic["Norway"]) # Oslo

# 문제
# - 딕셔너리 town의 값을 이용하여 '경기도의 중심 도시는 수원입니다', 
# - '서울의 중심 도시는 중구입니다'라고 출력

print('경기도의 중심 도시는 ' + town["경기도"] + '입니다.')
print('서울의 중심 도시는 ' + town["서울"] + '입니다.')

# 경기도의 중심 도시는 수원입니다.
# 서울의 중심 도시는 중구입니다.

# 5.2.3 딕셔너리 갱신 및 추가
# 딕셔너리의 값을 갱신할 때는 '딕셔너리명["값을 갱신할 키"] = 값'이라고 쓰고
# 딕셔너리에 요소를 추가할 때는 '딕셔너리명["추가할 키"] = 값'이라고 쓴다

dic = {"Norway" : "Oslo", "Korea" : "Seoul"}
dic["Korea"] = "Busan"
dic["China"] = "Beijing"
print(dic) # {'Norway': 'Oslo', 'Korea': 'Busan', 'China': 'Beijing'}

# 문제
# - 키 '제주도'와 값 '제주시'요소를 추가한 뒤 출력
# - 키 '경기도'의 값을 '분당'으로 변경하여 출력
town = {"경기도" : "수원", "서울" : "중구"}

town["제주도"] = "제주시"
print(town) # {'경기도': '수원', '서울': '중구', '제주도': '제주시'}

town["경기도"] = "분당"
print(town) # {'경기도': '분당', '서울': '중구', '제주도': '제주시'}

# 5.2.4 딕셔너리 요소 삭제
# 딕셔너리의 값을 삭제할 때는 'del 딕셔너리명["삭제할 키"]' 라고 기술한다
# 딕셔너리는 값을 직접 부르거나 쓰지 않고, 항상 key를 통해 호출한다는 것이 중요한 것 같다

dic = {'Norway': 'Oslo', 'Korea': 'Busan', 'China': 'Beijing'}
del dic["China"]
print(dic) # {'Norway': 'Oslo', 'Korea': 'Busan'}

# 문제 : 키가 경기도인 요소를 삭제하라
town = {'경기도': '분당', '서울': '중구', '제주도': '제주시'}
del town["경기도"]
print(town) # {'서울': '중구', '제주도': '제주시'}

